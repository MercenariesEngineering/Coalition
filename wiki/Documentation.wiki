#v3.8

= Jobs =

A job is a simple command to run on one of the workers. Each job has an ID chosen by the server.

A job can be submitted to the server using *control.py* or a HTTP request.

== Job attributes ==

A job may have different attributes. For example, the job attribute *cmd* is the command to execute.

The different job attributes used to initialise a job are :

 * cmd : the command to run
 * title : the title to display in the user interface
 * dir : the job's working directory
 * parent : the parent's job
 * priority : the job priority
 * dependencies : the job dependencies on other jobs
 * timeout : the job timeout in seconds
 * retry : how many time to retry this job
 * affinities : the job affinities to match
 * url : the url to open with the Open link
 * user : the user name/email of the owner of this job
 * localprogress
 * globalprogress

== Job execution ==

A new job is in the *WAITING* state.

When a worker run a job, it set the current working directory to *dir* and run the command *cmd*. The job is then in the *WORKING *state. If the command returns with the exit code 0, the job is put in the state *FINISHED*. If not, the job is put in the state *ERROR*.

If the job is in the *ERROR* state, the server will retry to run this job up to *retry* times.

If the job duration exceeds *timeout*, the server will kill this job and set it in the ERROR state.

== Job display ==

The *title* attribute is displayed in the user interface.

The *url* attribute is the url to open with the Open link in the user interface.

By default, the web browser blocks the URLs on local files.

On Firefox, it is possible to override this behavior. Chech this : http://kb.mozillazine.org/Links_to_local_pages_don%27t_work

== Job hierarchy ==

A job can be the parent of some children jobs. In this case, the parent job won't run any command. Even if the attribute *cmd* has been provided. 

The *parent* attribute can be specified to create a job into a previously created parent job. In this case, *parent* must be the ID of this parent job.

The hierarchy is useful to organize and schedule the different jobs.

=== Job dependencies ===

The *dependencies* attributes is a job ID list of the different jobs to finish before to run this job.

A list can be provided like this : "1,3,5".

=== Job affinities ===

Affinities are used to associate some jobs to a subset of workers.

The affinity attribute is a list of strings, separated by comas.

If a job has an *affinity* attribute, only the workers with the affinities matching all the job's affinities will be able to run this job.

For example, let's say a job has the following *affinity* : "LINUX,24GB". Here is a summary of which worker affinities configuration match the job's one :

|| *Job affinites* || *Worker affinities* || *Match* ||
|| "LINUX,24GB" || "LINUX" || NO ||
|| "LINUX,24GB" || "24GB" || NO ||
|| "LINUX,24GB" || "LINUX,24GB" || YES ||
|| "LINUX,24GB" || "LINUX,24GB,GL" || YES ||

== Job owner ==

The *user* attributes is the user name of the owner of the job. If the emails are activated, the emails regarding this job will be sent at *user*.

If LDAP is configured, the job will be executed with the *user* rights.

== Job progression ==

= Server =

The coalition server collects the jobs and distributes them to the differents workers.

== Run the server ==

== Add a job ==

== Database backup ==

== LDAP ==

This feature works only under a linux system with the "su" command available.

server.py can use LDAP to authenticate the users in order to control access to the monitor and run the jobs with the users's privileges.

=== LDAP Setup ===

To use a LDAP server, you have to run the server with the two following options :

{{{
--ldaphost=LDAPHOST
--ldaptemplate=LDAPTEMPLATE
}}}

LDAPHOST is the host name of the LDAP server.
LDAPTEMPLATE is a template like "uid=%login,ou=people,dc=exemple,dc=com" used to test the password. "%login" will be replaced by the user login.

The worker have to be run as root because it will now run the jobs with the user rights. 

If the server is started with the --ldapserver option, the user will be asked for their login and password. The jobs will be added with the user's login. The workers will execute 
the jobs with the user's privileges.

= Worker =

= Control =